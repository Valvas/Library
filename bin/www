/****************************************************************************************************/

require('../app')((app) =>
{
  var app = app;
 
  var debug = require('debug')('library:server');
  var http = require('http');

  var port = normalizePort(app.get('port'));
  app.set('port', port);

  var server = http.createServer(app);

  /****************************************************************************************************/

  var io = require('socket.io')(server);

  io.on('connection', (socket) =>
  {
    socket.on('join_file', (name) => { socket.join(name); });

    socket.on('join_service', (name) => { socket.join(name); });

    socket.on('join_report', (name) => { socket.join(name); });

    socket.on('join_reports_list', () => { socket.join('reports'); });

    socket.on('admin_update_comment', (object) => { socket.to(object.room).emit('update_comment', object.room); });

    socket.on('update_report_comments', (object) => { socket.to(object.room).emit('update_report_comments', object.room); });

    socket.on('update_report_status', (object) => { socket.to(object.room).emit('update_report_status', object.status, object.color, object.report); });

    socket.on('from_file_delete', (object) => { socket.to(object.room).emit('delete_file', object.logID); });

    socket.on('from_service_delete', (object) => { socket.to(object.room).emit('delete_file', object.fileUUID); });

    socket.on('post_comment', (object) => { socket.to(object.room).emit('post_comment', object.logID); });

    socket.on('from_file_download', (object) => { socket.to(object.room).emit('download_file', object.logID); });

    socket.on('from_file_upload', (object) => { socket.to(object.room).emit('upload_file', object.logID); });

    socket.on('from_service_upload', (object) => { socket.to(object.room).emit('upload_file'); });
  });

  /****************************************************************************************************/

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  function normalizePort(val) 
  {
    var port = parseInt(val, 10);

    if(isNaN(port)) return val;
    if(port >= 0) return port;
    return false;
  }

  function onError(error) 
  {
    if(error.syscall !== 'listen') throw error;

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    switch(error.code) 
    {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  function onListening() 
  {
    var bind = typeof server.address() === 'string' ? 'pipe ' + server.address() : 'port ' + server.address().port;
    console.log(`\nServer is ready and listening on ${bind}`);
  }
});