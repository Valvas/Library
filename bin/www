/****************************************************************************************************/

require('../app')((app) =>
{ 
  var http = require('http');

  var port = normalizePort(app.get('port'));
  app.set('port', port);

  var server = http.createServer(app);

  /****************************************************************************************************/

  var io = require('socket.io')(server);

  require('../socket')(io, app, () =>
  {
    app.set('io', io);
    
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  });

  /****************************************************************************************************/

  function normalizePort(val) 
  {
    var port = parseInt(val, 10);

    if(isNaN(port)) return val;
    if(port >= 0) return port;
    return false;
  }

  function onError(error) 
  {
    if(error.syscall !== 'listen') throw error;

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    switch(error.code) 
    {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  function onListening() 
  {
    var bind = typeof server.address() === 'string' ? 'pipe ' + server.address() : 'port ' + server.address().port;
    console.log(`\nServer is ready and listening on ${bind}`);
  }

  /****************************************************************************************************/
});