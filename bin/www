/****************************************************************************************************/

var app = require('../app');
var debug = require('debug')('library:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

/****************************************************************************************************/

var io = require('socket.io')(server);

var fileIO    = io.of('/file');

io.on('connection', (socket) =>
{
  socket.on('join_service', (name) =>
  {console.log(name)
    socket.join(name);
  });

  socket.on('delete_file', (object) =>
  {console.log(object)
    socket.to(object.room).emit('delete_file', object.fileUUID);
  });
});

fileIO.on('connection', (socket) =>
{
  socket.on('join_file', (name) =>
  {
    socket.join(name);
  });

  socket.on('post_comment', (object) =>
  {
    socket.to(object.room).emit('post_comment', object.logID);
  });

  socket.on('delete_file', (object) =>
  {
    socket.to(object.room).emit('delete_file', object.logID);
  });

  socket.on('download_file', (object) =>
  {
    socket.to(object.room).emit('download_file');
  });
});

/****************************************************************************************************/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
