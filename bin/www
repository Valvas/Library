/****************************************************************************************************/

require('../app')((app) =>
{
  var app = app;

  const accountsGet                 = require(`${__root}/functions/accounts/get`);
  const storageAppFilesGet          = require(`${__root}/functions/storage/files/get`);
 
  var debug = require('debug')('library:server');
  var http = require('http');

  var port = normalizePort(app.get('port'));
  app.set('port', port);

  var server = http.createServer(app);

  /****************************************************************************************************/

  var io = require('socket.io')(server);

  io.on('connection', (socket) =>
  {
    socket.on('adminAppAccountsHomeJoin', () => { socket.join('adminAppAccountsHome'); });
    socket.on('adminAppAccountsDetailJoin', (accountUUID) => { socket.join(accountUUID); })
    socket.on('storageAppServicesDetailJoin', (serviceName) => { socket.join(serviceName); });
    socket.on('storageAppAdminServicesList', () => { socket.join('storageAppAdminServicesList'); });

    socket.on('accountCreated', (accountEmail) => 
    {
      accountsGet.getAccountUsingEmail(accountEmail, app.get('mysqlConnector'), (error, account) =>
      {
        if(error == null) io.in('adminAppAccountsHome').emit('accountCreated', null, account);
      });
    });

    socket.on('accountModified', (accountUUID) =>
    {
      accountsGet.getAccountUsingUUID(accountUUID, app.get('mysqlConnector'), (error, account) =>
      {
        if(error == null) io.in('adminAppAccountsHome').emit('accountModified', null, account);
      });
    });

    socket.on('accountRemoved', (accountUUID) =>
    {
      io.in('adminAppAccountsHome').emit('accountRemovedOnHome', null, accountUUID);
      socket.to(accountUUID).emit('accountRemovedOnDetail');
    });

    socket.on('storageAppServicesfileUploaded', (fileID, serviceName) =>
    {
      storageAppFilesGet.getFileFromDatabaseUsingID(fileID, app.get('mysqlConnector'), (error, file) =>
      {
        if(error == null) io.in(serviceName).emit('fileUploaded', null, file);
      });
    });

    socket.on('storageAppServicesFileRemoved', (fileName, serviceName) =>
    {
      io.in(serviceName).emit('fileRemoved', null, fileName);
    });

    socket.on('storageAppAdminServiceRemoved', (serviceName) =>
    {
      io.in('storageAppAdminServicesList').emit('serviceRemoved', null, serviceName);
    });
  });

  /****************************************************************************************************/

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  function normalizePort(val) 
  {
    var port = parseInt(val, 10);

    if(isNaN(port)) return val;
    if(port >= 0) return port;
    return false;
  }

  function onError(error) 
  {
    if(error.syscall !== 'listen') throw error;

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    switch(error.code) 
    {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  function onListening() 
  {
    var bind = typeof server.address() === 'string' ? 'pipe ' + server.address() : 'port ' + server.address().port;
    console.log(`\nServer is ready and listening on ${bind}`);
  }
});